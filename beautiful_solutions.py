# ''' –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è üå∂Ô∏è '''
#
# n = int(input())
# s = input()
#
# for el in s:
#     cur_n = ord("a") + (ord(el) - ord("a") + 26 - n) % 26
#     print(chr(cur_n), end="")


# s = [int(i) for i in s] - –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ str –≤ —Å–ø–∏—Å–æ–∫ int


# l = [int(i) for i in input().split()] # —Å–ø–æ—Å–æ–± –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ str –≤ —Å–ø–∏—Å–æ–∫ int




# def is_palindrome(number):
#     # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º
#     return str(number) == str(number)[::-1]

# def is_prime(number):
#     # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º
#     if number <= 1:
#         return False
#     for i in range(2, int(number**0.5) + 1):
#         if number % i == 0:
#             return False
#     return True

# def is_valid_password(password):
#     # –†–∞–∑–±–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –Ω–∞ a, b –∏ c
#     parts = password.split(":")
#     if len(parts) != 3:
#         return False
#
#     a, b, c = map(int, parts)
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
#     if is_palindrome(a) and is_prime(b) and c % 2 == 0:
#         return True
#     else:
#         return False


# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
# password = input()
# result = is_valid_password(password)
# if result:
#     print("–ü–∞—Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
# else:
#     print("–ü–∞—Ä–æ–ª—å –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
