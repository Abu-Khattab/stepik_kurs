# ''' –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è üå∂Ô∏è '''
#
# n = int(input())
# s = input()
#
# for el in s:
#     cur_n = ord("a") + (ord(el) - ord("a") + 26 - n) % 26
#     print(chr(cur_n), end="")


# s = [int(i) for i in s] - –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ str –≤ —Å–ø–∏—Å–æ–∫ int


# l = [int(i) for i in input().split()] # —Å–ø–æ—Å–æ–± –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ str –≤ —Å–ø–∏—Å–æ–∫ int




# def is_palindrome(number):
#     # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º
#     return str(number) == str(number)[::-1]

# def is_prime(number):
#     # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º
#     if number <= 1:
#         return False
#     for i in range(2, int(number**0.5) + 1):
#         if number % i == 0:
#             return False
#     return True

# def is_valid_password(password):
#     # –†–∞–∑–±–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –Ω–∞ a, b –∏ c
#     parts = password.split(":")
#     if len(parts) != 3:
#         return False
#
#     a, b, c = map(int, parts)
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
#     if is_palindrome(a) and is_prime(b) and c % 2 == 0:
#         return True
#     else:
#         return False


# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
# password = input()
# result = is_valid_password(password)
# if result:
#     print("–ü–∞—Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
# else:
#     print("–ü–∞—Ä–æ–ª—å –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")



# ''' —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—ë—Ç –∏–ª–∏ –Ω–µ—á—ë—Ç —á–∏—Å–ª–æ '''
# def even_or_odd(number):
#   return ["Even", "Odd"][number % 2]

# ''' –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≥–æ–¥ —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–∞ –¥–≤–∞ –Ω—É–ª—è '''
#
# print('YES' if int(input()) % 100 == 0 else 'NO')



# {int(_) for _ in input().split()}  # –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –º–æ–∂–Ω–æ –µ—â–µ —Å—Ä–∞–∑—É —Ç–∞–∫))



# ''' –ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å—Ç—Ä–æ–∫–∏ text –±—É–¥–µ—Ç –ø–æ–¥—Å—á–∏—Ç–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π. '''
#
# text = 'footballcyberpunkextraterritorialityconversationalistblockophthalmoscopicinterdependencemamauserfff'
#
# result = {}
#
# for i in text:
#     result[i] = result.get(i, 0) + 1
#
# print(result)


# {value:key for key, value in result.items()} # –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ. –ú–æ–∂–µ—Ç –∫–æ–º—É –Ω–∏–±—É–¥—å –ø–æ–º–æ–∂–µ—Ç.


# lst = [word.strip('.,!?:;-') for word in input().lower().split()]  # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–Ω—ã—Ö  —Å–ª–æ–≤



# ''' –í–æ–∑–≤—Ä–∞—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –∏–∑ –º–∞—Å—Å–∏–≤–∞ '''
#
#
# def removeDuplicates(nums):
#     if not nums:
#         return 0
#
#     k = 1  # –ò–Ω–¥–µ–∫—Å, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–µ–∫—É—â—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –º–∞—Å—Å–∏–≤–µ
#
#     for i in range(1, len(nums)):
#         if nums[i] != nums[i - 1]:
#             nums[k] = nums[i]
#             k += 1
#
#     return k
#
#
# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# nums = [1, 1, 2, 2, 2, 3, 3, 4, 5, 5]
# k = removeDuplicates(nums)
# print(nums[:k])  # –í—ã–≤–æ–¥ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# print(k)  # –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤




# ''' –û–¥–Ω–∞–∫–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞: –∫–æ–≥–¥–∞ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å—Ç—É–¥–µ–Ω—Ç–µ –≤ —Å–ø–∏—Å–∫–µ, (i + 1) –≤—ã—Ö–æ–¥–∏—Ç –∑–∞
# –ø—Ä–µ–¥–µ–ª—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–ø–∏—Å–∫–∞ (–ø–æ—Å–∫–æ–ª—å–∫—É –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ä–∞–≤–µ–Ω len(list_of_students) - 1).
#
# –î–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä % (–≤–∑—è—Ç–∏–µ –ø–æ –º–æ–¥—É–ª—é).
# (i + 1) % len(list_of_students) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –æ—Å—Ç–∞–µ–º—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–ø–∏—Å–∫–∞.
# –ö–æ–≥–¥–∞ (i + 1) –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è len(list_of_students), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ 0,
# —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞. '''
#
#
# stud_quantity = int(input())
# list_of_students = []
# for i in range(stud_quantity):
#     students = input()
#     list_of_students.append(students)
#
# for i in range(len(list_of_students)):
#     print(f'{list_of_students[i]} - {list_of_students[(i + 1) % len(list_of_students)]}')


# —Ç–∞–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—ã—Ç—è–Ω–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É —Å–ª—É—á–∞–π–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –∏–∑ –≤—Å–µ—Ö 3 —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
# result = [choice(i) for i in (chars1, chars2, chars3)]


# ''' isinstance() - —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Python, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞.
# –ï—Å–ª–∏ arg —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (int –∏–ª–∏ float), —É—Å–ª–æ–≤–∏–µ –≤–µ—Ä–Ω–µ—Ç True, –∏ arg –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –≤ numeric_args.'''
#
# numeric_args = [arg for arg in args if isinstance(arg, (int, float))]
# numeric_args = [i for i in args if type(i) in (int, float)]



# def fun(x):
#     x = [int(i) for i in str(x)]
#     return sum(x)
#
#
# numbers = input().split()  # –°—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
# result = [fun(int(num)) for num in numbers]  # –ü—Ä–∏–º–µ–Ω—è–µ–º fun –∫ –∫–∞–∂–¥–æ–º—É —á–∏—Å–ª—É
# print(result)  # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç



def MAP(func, items):
    return [func(item) for item in items]



def FILTER(func, items):
    return [item for item in items if func(item)]


''' max - min '''

list1 = [[1, 7, 8], [9, 7, 102], [6, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
maximum = max(map(max, list1))

print(maximum)


''' —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É '''

n = int(input())
matrix = [input().split() for _ in range(n)]


