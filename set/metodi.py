
# a, b, c = 'Beegeek loves Stepik'.split()
# print(type(a))



# import matplotlib.pyplot as plt
# from matplotlib_venn import venn3
#
# venn3(subsets=(n, m, k, x, y, z), set_labels=("more", "derevnya", "gori"))
# plt.show()



# n, m, k, x, y, z = int(input()), int(input()), int(input()), int(input()), int(input()), int(input())
#
# s = (n-x) + m + (k-y) + z
# print(s)




# ''' –ö–Ω–∏–≥–∏ –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ üå∂Ô∏è '''


# n, m, k, x, y, z, t, a = (int(input()) for _ in range(8))
#
# s1 = n + m - x - t
# s2 = m + k - y - t
# s3 = n + k - z - t
#
# s = (n - s1 - s3 - t) + (m - s1 - s2 - t) + (k - s2 - s3 - t)
#
# print(s)
# print(s1 + s2 + s3)
# print(a - s - s1 - s2 - s3 - t)



# ''' or '''
#
#
# n, m, k, x, y, z, t, a = (int(input()) for _ in range(8))
#
# i = n + m + k
# j = x + y + z
#
# print(3 * (t - i) + 2 * j)
# print(2 * i - j - 3 * t)
# print(a + i - j - t)





# numbers = {20, 6, 8, 18, 18, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 12, 8, 8, 10, 4, 2, 2, 2, 16, 20}
# average = sum(numbers) / len(numbers)
#
# print(average)



# numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}
#
# print(*numbers, sep='\n')



# myset1 = set([1, 2, 3, 4, 5])
# myset2 = set('12345')
#
# print(myset1 == myset2)
# print(myset1)
# print(myset2)


# ''' —Å—É–º–º—É –∫–≤–∞–¥—Ä–æ—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ '''
#
# numbers = {9089, -67, -32, 1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111, 111, 1, 23}
# el = []
# for i in numbers:
#     el.append(i * i)
#     s = sum(el)
# print(s)
#
# ''' or '''
#
# numbers = {9089, -67, -32, 1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111, 111, 1, 23}
# print(sum(i**2 for i in numbers))
#
# ''' or '''
#
# numbers = {9089, -67, -32, 1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111, 111, 1, 23}
# print(sum([i*i for i in numbers]))



# fruits = {'apple', 'banana', 'cherry', 'avocado', 'pineapple', 'apricot', 'banana', 'avocado', 'grapefruit'}
# fruits = sorted(fruits, reverse = True)
#
# print(*fruits, sep='\n')




# ''' –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ '''

# s = input()
# if len(set(s)) == len(s):
#     print('YES')
# else:
#     print('NO')

# ''' or '''

# s = input()
# result = ['YES' if len(set(s)) == len(s) else 'NO']
# print(*result)



# ''' or '''
#
# print('YES' if len(s := input()) == len(set(s)) else 'NO')


# ''' or '''
#
# a = input()
# print(('NO','YES')[len(a) == len(set(a))])




# a, b = input(), input()
#
# a1 = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}
# result = set(a).union(set(b))
# if result == a1:
#     print('YES')
# else:
#     print('NO')



# ''' or '''
#
# # –í–≤–æ–¥ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ —Å–æ—Å—Ç–æ—è—â–∏—Ö –∏–∑ —Ü–∏—Ñ—Ä
# string1 = input()
# string2 = input()
#
# # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –æ–±–µ–∏—Ö —Å—Ç—Ä–æ–∫
# combined_string = string1 + string2
#
# # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
# combined_set = set(combined_string)
#
# # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –≤—Å–µ –¥–µ—Å—è—Ç—å —Ü–∏—Ñ—Ä
# all_digits = set("0123456789")
#
# # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ combined_set –≤—Å–µ –¥–µ—Å—è—Ç—å —Ü–∏—Ñ—Ä
# if combined_set == all_digits:
#     print("–î–∞, –≤ –æ–±–µ–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö –≤–º–µ—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –¥–µ—Å—è—Ç—å —Ü–∏—Ñ—Ä.")
# else:
#     print("–ù–µ—Ç, –Ω–µ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö –≤–º–µ—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –¥–µ—Å—è—Ç—å —Ü–∏—Ñ—Ä—ã.")


# ''' or '''
#
# print(('NO', 'YES')[len(set(input() + input())) == 10])


#
# ''' or '''
#
# numbers = set(input() + input())
# print('YES' if len(numbers) == 10 else 'NO')


# '''  '''

# a, b = input(), input()
# if set(a) == set(b):
#     print('YES')
# else:
#     print('NO')


# ''' or '''
# print(('NO', 'YES')[set(input()) == set(input())])


# ''' or '''
# print('YES' if set(input()) == set(input()) else 'NO')



# ''' –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å–ª–æ–≤ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –Ω–∞–±–æ—Ä –±—É–∫–≤ '''

# s = input().split()
# a = s[0]; b = s[1]; c = s[2]
# if set(a) == set(b) and set(c) == set(a):
#     print('YES')
# else:
#     print('NO')


# ''' or '''
# a, b, c = input().split()
# print(['NO', "YES"][set(a) == set(b) == set(c)])


# ''' or '''
# a, b, c = [set(i) for i in input().split()]
# print(['NO', 'YES'][a == b == c])




# myset = set()
# for i in range(10):
#     if i % 2 == 0:
#         myset.add('even')
#     else:
#         myset.add('odd')
# print(myset)


# for i in range(int(input())):
#     print(len(set(input().lower())))





# ''' –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ '''


# my_set = set()
# for i in range(int(input())):
#     my_set.update(input().lower())
# print(len(my_set))


# ''' or '''
#
# print(len(set(''.join([input().lower() for _ in range(int(input()))]))))
#
#
#
# ''' or '''
#
# s = set()
# for i in range(int(input())):
#     s |= set(input().lower())
# print(len(s))




# '''  –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–µ–∫—Å—Ç–∞ '''

# import re
#
# text = input()
# # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# cleaned_text = ' '.join(text.split()).lower()
#
# # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
# unique_words = set(re.findall(r'\b\w+\b', cleaned_text))
#
# # –í—ã–≤–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
# print("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ:", len(unique_words))


# ''' or '''
#
# words = [word.lower().strip('.,;:-?!') for word in input().split()]
#
# print(len(set(words)))



# ''' or'''
#
# print(len(set(x.strip('.,;:-?!') for x in input().lower().split())))



# ''' or'''
#
# s = input().lower()
# n = ''
#
# for b in s:
#     if b not in ['.',',',';',':','-','?','!']:
#         n += b
#
# n = n.split()
# print(len(set(n)))



# ''' or '''
#
# s = input().lower()
# for ch in '.,;:-?!':
#     s = s.replace(ch, '')
# print(len(set(s.split())))



# ''' –í—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –ª–∏ —á–∏—Å–ª–æ —Ä–∞–Ω—å—à–µ? '''
#
# numbers = input().split()
# seen_numbers = set()
#
# for number in numbers:
#     if number in seen_numbers:
#         print("YES")
#     else:
#         seen_numbers.add(number)
#         print("NO")
#
#
# ''' or '''
#
# lst = [int(el) for el in input().split()]
# for i in range(len(lst)):
#     if lst[i] in lst[:i]:
#         print('YES')
#     else:
#         print('NO')



# X = int(input())
# hours = X // 60  # –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 60 –¥–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
# minutes = X % 60  # –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 60 –¥–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
#
# # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
# print(hours, minutes)



# ''' –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, —Ç–∞–∫ –∏ –≤–æ –≤—Ç–æ—Ä–æ–π.
#
# '''
#
# a = set(input().split())
# b = set(input().split())
# count = a & b
# print(len(count))
#
#
#
# ''' or '''
#
# print(len(set(input().split()) & set(input().split())))




# ''' –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, —Ç–∞–∫ –∏ –≤–æ –≤—Ç–æ—Ä–æ–π. '''
#
# a, b = set(input().split()), set(input().split())
# print(*sorted(a & b, key=int))
#
#
# ''' or '''
#
# set1 = set(int(i) for i in input().split())
# set2 = set(int(i) for i in input().split())
#
# print(*sorted(set1 & set2))
#
#
# ''' or '''
#
# print(*sorted(set(input().split()) & set(input().split()), key=int))
#
#
#
# ''' —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Ç–æ—Ä–æ–π.
#
#  '''
#
# set1 = set(int(i) for i in input().split())
# set2 = set(int(i) for i in input().split())
#
# print(*sorted(set1 - set2))



# ''' –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –æ–±—â–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è —É –≤—Å–µ—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª '''
#
# n = int(input())
# a = set(input())
# for i in range(n - 1):
#     b = set(input())
#     a = a.intersection(b)  # –ü–µ—Ä–µ—Å–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
# result = sorted(a)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
# print(*result)





# ''' or '''
#
# n = int(input())
# numbers = [input() for _ in range(n)]
#
# num_set = set(numbers[0]).intersection(*numbers)
# print(*sorted(num_set))


# ''' or '''
#
# n, my_set = int(input()), set(input())
#
# for _ in range(n - 1):
#     my_set = my_set & set(input())
#
# print(*sorted(my_set, key=int))


# ''' –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã '''

# a, b = set(input()), set(input())
# if a.isdisjoint(b):
#     print('NO')
# else:
#     print('YES')


# ''' or '''
#
# print(("YES", "NO")[set(input()).isdisjoint(input())])



# ''' or '''
#
# print('NO' if set(input()).isdisjoint(set(input())) else 'YES')



# ''' –≤—Ö–æ–¥—è—Ç –ª–∏ –≤ –∑–∞–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –≤—Å–µ —Ü–∏—Ñ—Ä—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ—Å—è –≤ –∑–∞–ø–∏—Å–∏ –≤—Ç–æ—Ä–æ–≥–æ '''

# print('NO' if set(input()) <= (set(input())) else 'YES')




# ''' –≤—ã–≤–æ–¥–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∏ —É –ø–µ—Ä–≤–æ–≥–æ –∏ —É –≤—Ç–æ—Ä–æ–≥–æ
#  —É—á–µ–Ω–∏–∫–æ–≤, –Ω–æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É —Ç—Ä–µ—Ç—å–µ–≥–æ —É—á–µ–Ω–∏–∫–∞. '''
#
#
# a, b, c = [{*map(int, input().split())} for _ in range(3)]
# result = a & b
# res = result - c
# print(*sorted(res, reverse=True, key=int))
#
#
#
# ''' or '''
#
# set1 = set(int(i) for i in input().split())
# set2 = set(int(i) for i in input().split())
# set3 = set(int(i) for i in input().split())
#
# print(*sorted(set1 & set2 - set3, reverse=True))
#
#
# ''' or '''
#
# a, b, c = [set(map(int, input().split())) for _ in range(3)]
#
# print(*sorted((a & b) - c, reverse=True))


# ''' –≤—ã–≤–æ–¥–∏—Ç —Ç–∞–∫–∏–µ –æ—Ü–µ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ, —á–µ–º —É –¥–≤—É—Ö —É—á–µ–Ω–∏–∫–æ–≤ '''
#
# a, b, c = [set(map(int, input().split())) for _ in range(3)]
# res = a.intersection(b, c)
# result = (a | b | c) - res
# print(*sorted(result))


# ''' or '''
#
# a, b, c = [set(map(int, input().split())) for _ in range(3)]
#
# print(*sorted((a | b | c) - (a & b & c)))


# ''' –≤—ã–≤–æ–¥–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—á–µ–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–∏ —É –ø–µ—Ä–≤–æ–≥–æ, –Ω–∏ —É –≤—Ç–æ—Ä–æ–≥–æ —É—á–µ–Ω–∏–∫–∞. '''
#
# a, b, c = [set(map(int, input().split())) for _ in range(3)]
# print(*sorted(c - (a | b), reverse=True))


# ''' –≤—ã–≤–æ–¥–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫, –Ω–µ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤. '''

# a, b, c = [set(map(int, input().split())) for _ in range(3)]
# n = set(range(11))
# print(*sorted(n - (a | b | c)))


# ''' –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã '''
#
# items = [10, '30', 30, 10, '56', 34, '12', 90, 89, 34, 45, '67', 12, 10, 90, 23, '45', 56, '56', 1, 5, '6', 5]
# my_set = {int(el) for el in items}
# print(*sorted(my_set))
#
#
# ''' or '''
#
# items = [10, '30', 30, 10, '56', 34, '12', 90, 89, 34, 45, '67', 12, 10, 90, 23, '45', 56, '56', 1, 5, '6', 5]
# print(*sorted(set(map(int, items))))



# ''' –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) '''
#
# words = ['Plum', 'Grapefruit', 'apple', 'orange', 'pomegranate', 'Cranberry', 'lime',
#          'Lemon', 'grapes', 'persimmon', 'tangerine', 'Watermelon', 'currant', 'Almond']
# print(*sorted({i[0].lower() for i in words}))





# import string
#
# sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and,
# save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory,
#  over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely,
#   you all know those redolent remnants of day suspended, with the midges,
#   about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk;
#    a furry warmth, golden midges.'''
#
# # –û—á–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
# translator = str.maketrans('', '', string.punctuation)
# cleaned_sentence = sentence.translate(translator)
#
# my_set = {word.lower() for word in cleaned_sentence.split()}
# print(*sorted(my_set))



# ''' or '''
#
# sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and,
# save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory,
#  over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely,
#  you all know those redolent remnants of day suspended, with the midges,
#   about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk;
#    a furry warmth, golden midges.'''
#
# a = {i.strip(':,.!?();').lower() for i in sentence.split()}
# print(*sorted(a))



# ''' –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞  —Å—Ç—Ä–æ–∫–∏ sentence –¥–ª–∏–Ω–æ—é –º–µ–Ω—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤ '''
#
# sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and,
# save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory,
#  over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely,
#   you all know those redolent remnants of day suspended, with the midges,
#   about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk;
#    a furry warmth, golden midges.'''
#
# s = {i.strip(':,.!?();').lower() for i in sentence.split() if len(i.strip(':,.!?();')) < 4}
# print(*sorted(s))




# ''' –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ c —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .png '''
#
# files = ['python.png', 'qwerty.py', 'stepik.png', 'beegeek.org', 'windows.pnp', 'pen.txt', 'phone.py', 'book.txT',
#          'board.pNg', 'keyBoard.jpg', 'Python.PNg', 'apple.jpeg', 'png.png', 'input.tXt', 'split.pop', 'solution.Py',
#          'stepik.org', 'kotlin.ko', 'github.git']
#
# result = {file.lower() for file in files if file.lower().endswith('.png')}
# print(*sorted(result))


