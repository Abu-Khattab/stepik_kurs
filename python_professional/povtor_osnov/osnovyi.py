''' –§—É–Ω–∫—Ü–∏—è hide_card() '''

def hide_card(card_number):
    """
    –§—É–Ω–∫—Ü–∏—è hide_card –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã card_number (—Å—Ç—Ä–æ–∫–∞)
    –∏ –∑–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–≤—ã–µ 12 —Ü–∏—Ñ—Ä –Ω–∞ —Å–∏–º–≤–æ–ª *, —É–¥–∞–ª—è—è –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã.
    """
    card_number = card_number.replace(' ', '')  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã
    return '*' * 12 + card_number[12:]  # –∑–∞–º–µ–Ω–∞ –ø–µ—Ä–≤—ã—Ö 12 —Ü–∏—Ñ—Ä –Ω–∞ *

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
print(hide_card(input()))  # –≤—ã–≤–æ–¥–∏—Ç: '************4567'



''' –§—É–Ω–∫—Ü–∏—è same_parity() '''

def same_parity(numbers):
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if not numbers:
        return []
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –≤ —Å–ø–∏—Å–∫–µ
    parity = numbers[0] % 2
    # –°–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç —á–∏—Å–ª–∞ —Å —Ç–∞–∫–æ–π –∂–µ —á–µ—Ç–Ω–æ—Å—Ç—å—é, —á—Ç–æ –∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ
    return [num for num in numbers if num % 2 == parity]

# –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
numbers = list(map(int, input("Enter numbers separated by space: ").split()))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª —Å —Ç–æ–π –∂–µ —á–µ—Ç–Ω–æ—Å—Ç—å—é, —á—Ç–æ –∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ, –∏ –≤—ã–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
result = same_parity(numbers)
print("Numbers with the same parity as the first number:", result)



''' –§—É–Ω–∫—Ü–∏—è is_valid() '''

def is_valid(string):
    if 7 > len(string) > 3:
        if string.isdigit():
            if string.count(' ') == 0:
                return True
    return False


''' or '''

def is_valid(pin):
    return pin.isdigit() and len(pin) in (4, 5, 6)

''' or '''

def is_valid(pin: str) -> bool:
    return all((4 <= len(pin) <= 6, pin.isdigit()))




''' –§—É–Ω–∫—Ü–∏—è print_given() '''

def print_given(*args, **kwargs):
    # –≤—ã–≤–æ–¥ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    for arg in args:
        print(f"{arg} {type(arg)}")

    # –≤—ã–≤–æ–¥ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    for key in sorted(kwargs.keys()):
        print(f"{key} {kwargs[key]} {type(kwargs[key])}")

print_given(1, [1, 2, 3], 'three', two=2)


''' or '''

def print_given(*args, **kwargs):
    for arg in args:
        print(arg, type(arg))
    for name, value in sorted(kwargs.items()):
        print(name, value, type(value))



''' –§—É–Ω–∫—Ü–∏—è convert() '''

def convert(string):
    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É–∫–≤ –≤ –≤–µ—Ä—Ö–Ω–µ–º –∏ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö
    upper_count = sum(1 for char in string if char.isupper())
    lower_count = sum(1 for char in string if char.islower())

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
    if upper_count > lower_count:
        return string.upper()
    elif lower_count > upper_count:
        return string.lower()
    else:
        return string.lower()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
input_string = input()
result = convert(input_string)
print(result)


''' or '''


def convert(text):
    lower_count = len(list(filter(str.islower, text)))
    upper_count = len(list(filter(str.isupper, text)))
    if lower_count >= upper_count:
        return text.lower()
    return text.upper()


''' or '''

def convert(string):
    if sum(1 if c.isupper() else -1 for c in string if c.isalpha()) > 0:
        return string.upper()
    return string.lower()




''' –§—É–Ω–∫—Ü–∏—è filter_anagrams() '''

from collections import Counter


def filter_anagrams(word, words):
    return [x for x in words if Counter(word) == Counter(x)]


word = 'abba'
words = ['aabb', 'abcd', 'bbaa', 'dada']

print(filter_anagrams(word, words))


''' or '''

def filter_anagrams(word, anagrams):
    return [anagram for anagram in anagrams if sorted(anagram) == sorted(word)]


''' or '''

def filter_anagrams(word, anagrams):
    return(list(filter(lambda x: sorted(x) == sorted(word), anagrams)))





''' –§—É–Ω–∫—Ü–∏—è likes() '''

def likes(names):
    if len(names) == 0:
        return "–ù–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª –¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"
    elif len(names) == 1:
        return f"{names[0]} –æ—Ü–µ–Ω–∏–ª(–∞) –¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"
    elif len(names) == 2:
        return f"{names[0]} –∏ {names[1]} –æ—Ü–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"
    elif len(names) == 3:
        return f"{names[0]}, {names[1]} –∏ {names[2]} –æ—Ü–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"
    else:
        return f"{names[0]}, {names[1]} –∏ {len(names) - 2} –¥—Ä—É–≥–∏—Ö –æ—Ü–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
print(likes([]))
print(likes(['–¢–∏–º—É—Ä']))
print(likes(['–¢–∏–º—É—Ä', '–ê—Ä—Ç—É—Ä']))
print(likes(['–¢–∏–º—É—Ä', '–ê—Ä—Ç—É—Ä', '–†—É—Å–ª–∞–Ω']))
print(likes(['–¢–∏–º—É—Ä', '–ê—Ä—Ç—É—Ä', '–†—É—Å–ª–∞–Ω', '–ê–Ω—Ä–∏']))
print(likes(['–¢–∏–º—É—Ä', '–ê—Ä—Ç—É—Ä', '–†—É—Å–ª–∞–Ω', '–ê–Ω—Ä–∏', '–î–∏–º–∞']))
print(likes(['–¢–∏–º—É—Ä', '–ê—Ä—Ç—É—Ä', '–†—É—Å–ª–∞–Ω', '–ê–Ω—Ä–∏', '–î–∏–º–∞', '–†–æ–º–∞', '–ì–≤–∏–¥–æ', '–ú–∞—Ä–∫']))





''' –§—É–Ω–∫—Ü–∏—è index_of_nearest() '''

def index_of_nearest(numbers, number):
    if not numbers:  # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return -1
    # –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —Ä–∞–∑–Ω–∏—Ü—ã
    return min(range(len(numbers)), key=lambda index: abs(numbers[index] - number))

print(index_of_nearest([7, 13, 3, 5, 18], 0))


''' or '''

def index_of_nearest(nums, n):
    if nums:
        minimum = min(nums, key=lambda num: abs(num - n))
        return nums.index(minimum)
    return -1



''' –§—É–Ω–∫—Ü–∏—è spell() '''

def spell(*args):
    return {i.lower()[0]: len(i) for i in sorted(args, key=len)}


words = ['–†–æ—Å—Å–∏—è', '–ê–≤—Å—Ç—Ä–∏—è', '–ê–≤—Å—Ç—Ä–∞–ª–∏—è', '–†—É–º—ã–Ω–∏–Ø', '–£–∫—Ä–∞–∏–Ω–∞', '–ö–ò–¢–∞–π', '–£–ó–ë–ï–ö–ò–°–¢–ê–ù']
print(spell(*words))


''' or '''

def spell(*args):
    result = {}
    for word in args:
        if result.get(word[0].lower(), 0) < len(word):
            result[word[0].lower()] = len(word)
    return result




''' –§—É–Ω–∫—Ü–∏—è choose_plural() üå∂Ô∏èüå∂Ô∏è '''

def choose_plural(amount, declensions):
    if amount % 10 == 1 and amount % 100 != 11:
        correct_word = declensions[0]
    elif 2 <= amount % 10 <= 4 and (amount % 100 < 10 or amount % 100 >= 20):
        correct_word = declensions[1]
    else:
        correct_word = declensions[2]

    return "{} {}".format(amount, correct_word)

print(choose_plural(21, ('–ø—Ä–∏–º–µ—Ä', '–ø—Ä–∏–º–µ—Ä–∞', '–ø—Ä–∏–º–µ—Ä–æ–≤')))
print(choose_plural(92, ('–≥–≤–æ–∑–¥—å', '–≥–≤–æ–∑–¥—è', '–≥–≤–æ–∑–¥–µ–π')))
print(choose_plural(8, ('—è–±–ª–æ–∫–æ', '—è–±–ª–æ–∫–∞', '—è–±–ª–æ–∫')))
print(choose_plural(111223, ('–∫–æ–ø–µ–π–∫–∞', '–∫–æ–ø–µ–π–∫–∏', '–∫–æ–ø–µ–µ–∫')))
print(choose_plural(763434, ('—Ä—É–±–ª—å', '—Ä—É–±–ª—è', '—Ä—É–±–ª–µ–π')))
print(choose_plural(512312, ('—Ü–µ–Ω—Ç', '—Ü–µ–Ω—Ç–∞', '—Ü–µ–Ω—Ç–æ–≤')))
print(choose_plural(59, ('–ø–æ–º–∏–¥–æ—Ä', '–ø–æ–º–∏–¥–æ—Ä–∞', '–ø–æ–º–∏–¥–æ—Ä–æ–≤')))
print(choose_plural(23424157, ('–æ–≥—É—Ä–µ—Ü', '–æ–≥—É—Ä—Ü–∞', '–æ–≥—É—Ä—Ü–æ–≤')))
print(choose_plural(240, ('–∫—É—Ä–∏—Ü–∞', '–∫—É—Ä–∏—Ü—ã', '–∫—É—Ä–∏—Ü')))
print(choose_plural(49324, ('–ø–ª—é–º–±—É—Å', '–ø–ª—é–º–±—É—Å–∞', '–ø–ª—é–º–±—É—Å–æ–≤')))
print(choose_plural(505, ('—É—Ç–∫–∞', '—É—Ç–∫–∏', '—É—Ç–æ–∫')))
print(choose_plural(666, ('—à–∫–∞—Ñ', '—à–∫–∞—Ñ–∞', '—à–∫–∞—Ñ–æ–≤')))
print(choose_plural(11, ('—Å—Ç—É–ª', '—Å—Ç—É–ª–∞', '—Å—Ç—É–ª—å–µ–≤')))
print(choose_plural(3458438435812, ('–¥–æ–ª–ª–∞—Ä', '–¥–æ–ª–ª–∞—Ä–∞', '–¥–æ–ª–ª–∞—Ä–æ–≤')))




''' –§—É–Ω–∫—Ü–∏—è get_biggest() üå∂Ô∏èüå∂Ô∏è '''


def get_biggest(numbers):
    if numbers:
        s = ''
        max_len_num = len(str(max(numbers)))
        numbers = sorted([str(i) for i in numbers], reverse=True, key=lambda x: x * max_len_num)
        return int(s.join(numbers))
    return -1



''' or '''

class new_str(str):
    def __lt__(self, other):
        return int(f'{self}{other}') < int(f'{other}{self}')


def get_biggest(numbers):
    if not numbers:
        return -1
    numbers = [new_str(n) for n in numbers]
    return int(''.join(sorted(numbers)[::-1]))




''' –¢–∏–º—É—Ä, –ê—Ä—Ç—É—Ä –∏ –Ω–æ–≤—ã–π –∫—É—Ä—Å '''


d1, d2, d3 = [int(input()) for _ in range(3)]
print(min(d1 + d3 + d2, d1 + d1 + d2 + d2, d2 + d3 + d3 + d2, d1 + d3 + d3 + d1))


''' or '''

lst = sorted([int(input()) for i in range(3)])
if sum(lst[:2]) * 2 < sum(lst):
    print(sum(lst[:2]) * 2)
else:
    print(sum(lst))


''' or '''


lst = sorted(int(input()) for _ in range(3))

print(min(sum(lst), sum(lst[:2]) * 2))



''' –°—Ö–æ–∂–∏–µ –±—É–∫–≤—ã '''


langs = ['ru', 'mix', 'mix', 'en']
eng = 'AaBCcEeHKMOoPpTXxy'
index = sum([input() in eng for i in range(3)])
print(langs[index])


