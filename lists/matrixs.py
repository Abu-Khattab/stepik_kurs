

''' –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è '''

n, m = int(input()), int(input())
matrix = []

for k in range(n):
    tmp = [x for x in range(m)]
    matrix.append(tmp)

for i in range(n):
    for q in range(m):
        matrix[i][q] = i * q

for i in range(n):
    for q in range(m):
        print(str(matrix[i][q]).ljust(3), end=' ')
    print()




''' –ú–∞–∫—Å–∏–º—É–º –≤ —Ç–∞–±–ª–∏—Ü–µ '''

n, m = int(input()), int(input())
matrix = []

for k in range(n):
    tmp = [int(x) for x in input().split()]
    matrix.append(tmp)


x = 0
y = 0
matrix_max = matrix[0][0]

for i in range(n):
    for q in range(m):
        if matrix[i][q] > matrix_max:
            matrix_max = matrix[i][q]
            x = i
            y = q

print(x, y)



''' –û–±–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ '''


n, m = int(input()), int(input())
matrix = []

for k in range(n):
    tmp = [int(x) for x in input().split()]
    matrix.append(tmp)


i, j = [int(i) for i in input().split()]


for x in range(n):
    matrix[x][i], matrix[x][j] = matrix[x][j], matrix[x][i]

for q in range(n):
    print(*matrix[q])



''' –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ '''


n = int(input())
matrix = []

for k in range(n):
    tmp = [int(x) for x in input().split()]
    matrix.append(tmp)


def is_symmetric(matrix):
    rows = len(matrix)
    cols = len(matrix[0])


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å
    for i in range(rows):
        for j in range(cols):
            if matrix[i][j] != matrix[j][i]:
                return False

    return True


result = is_symmetric(matrix)

if result:
    print("YES")
else:
    print("NO")



''' –û–±–º–µ–Ω –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π '''


n = int(input())
matrix = []

for k in range(n):
    tmp = [int(x) for x in input().split()]
    matrix.append(tmp)


for i in range(n):
    matrix[i][i], matrix[n - 1 - i][i] = matrix[n - 1 - i][i], matrix[i][i]


for q in range(n):
    print(*matrix[q])



''' –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ '''


n = int(input())
matrix = []

for k in range(n):
    tmp = [int(x) for x in input().split()]
    matrix.append(tmp)

# –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–æ–∫
reversed_matrix = matrix[::-1]

for row in reversed_matrix:
    print(*row)



''' –ü–æ–≤–æ—Ä–æ—Ç –º–∞—Ç—Ä–∏—Ü—ã '''


n = int(input())
matrix = [input().split() for _ in range(n)]

for i in range(n):
    for q in range(n - 1, -1, -1):
        print(matrix[q][i], end=' ')

    print()



''' –•–æ–¥—ã –∫–æ–Ω—è '''


x, y = input()
n = 8
matrix = [['.'] * n for _ in range(n)]
y = n - int(y)
x = ord(x) - 97
matrix[y][x] = 'N'

for i in range(n):
    for q in range(n):
        if abs(i - y) * abs(q - x) == 2:
            matrix[i][q] = '*'


for x in range(n):
    print(*matrix[x])



''' –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç üå∂Ô∏è '''


n = int(input())
matrix = []
for _ in range(n):
    tmp = [int(x) for x in input().split()]
    matrix.append(tmp)
digits = [i for i in range(1, n ** 2 + 1)]

d1, d2 = 0, 0

for i in range(n):
    stolb_sum, stroka_sum = 0, 0
    for j in range(n):
        stolb_sum += matrix[j][i]
        stroka_sum += matrix[i][j]
        if matrix[i][j] in digits:
            digits.remove(matrix[i][j])
    d1 += matrix[i][i]
    d2 += matrix[i][n - i - 1]
    if stolb_sum != stroka_sum:
        break

if stolb_sum == stroka_sum == d1 == d2 and digits == []:
    print("YES")
else:
    print("NO")



''' or '''


def is_magic_square(n, matrix):
    # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
    correct_nums = list(range(1, n ** 2 + 1))

    # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–µ–ª –Ω–∞—à–µ–π –º–∞—Ç—Ä–∏—Ü—ã
    our_nums = []
    for row in matrix:
        our_nums.extend(row)

    # –µ—Å–ª–∏ —ç—Ç–∏ —Å–ø–∏—Å–∫–∏ –Ω–µ —Ä–∞–≤–Ω—ã, –∑–Ω–∞—á–∏—Ç –Ω–∞—à–∞ –º–∞—Ç—Ä–∏—Ü–∞ —É–∂–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n ** 2
    # –∑–Ω–∞—á–∏—Ç, –º—ã —Å—Ä–∞–∑—É –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å "NO" –∏ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if sorted(our_nums) != correct_nums:
        return "NO"

    # –≤ —Å–∞–º–æ–π –º–∞—Ç—Ä–∏—Ü–µ –º—ã —É–∂–µ —Ö—Ä–∞–Ω–∏–º –≤—Å–µ —Ä—è–¥—ã (—Å—Ç—Ä–æ–∫–∏)
    rows = matrix.copy()

    # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    columns = []
    for j in range(n):
        cur_column = []
        for i in range(n):
            cur_column.append(matrix[i][j])

        columns.append(cur_column)

    # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π (—Å –¥–≤—É–º—è –ø—É—Å—Ç—ã–º–∏ –ø–æ–¥—Å–ø–∏—Å–∫–∞–º–∏)
    diagonals = [[], []]
    for i in range(n):
        diagonals[0].append(matrix[i][i])
        diagonals[1].append(matrix[i][n - 1 - i])

    # —Å–æ–µ–¥–∏–Ω—è–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, —Å—Ç–æ–ª–±—Ü—ã –∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    all_lines = rows + columns + diagonals

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö "–ª–∏–Ω–∏–π"
    # –∑–∞ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–∑—å–º—ë–º —Å—É–º–º—É –ø–µ—Ä–≤–æ–π "–ª–∏–Ω–∏–∏"
    max_sum = sum(all_lines[0])
    min_sum = sum(all_lines[0])
    for line in all_lines:
        max_sum = max(max_sum, sum(line))
        min_sum = min(min_sum, sum(line))

    # —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—ã
    # –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã, —Ç.–∫. –≤—Å–µ —Å—É–º–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã
    if max_sum != min_sum:
        return "NO"

    return "YES"


n = int(input())
matrix = [[int(el) for el in input().split()] for _ in range(n)]

print(is_magic_square(n, matrix))




''' –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ '''


x = input().split()
n, m = (int(x[0]), int(x[1]))
matrix = []

for _ in range(n):
    tmp = [e for e in range(m)]
    matrix.append(tmp)

for i in range(n):
    for q in range(m):
        if (i + q) % 2 == 0:
            matrix[i][q] = '.'
        else:
            matrix[i][q] = '*'


for i in range(n):
    print(*matrix[i])



''' –ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å '''


n = int(input())
matrix = []

for _ in range(n):
    tmp = [e for e in range(n)]
    matrix.append(tmp)

for i in range(n):
    for q in range(n):
        if i == n - 1 - q:
            matrix[i][q] = 1
        elif i < n - 1 - q:
            matrix[i][q] = 0
        else:
            matrix[i][q] = 2

for i in range(n):
    print(*matrix[i])



''' –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 1 '''


x = input().split()
n, m = (int(x[0]), int(x[1]))
matrix = []

for i in range(n):
    tmp = [i * m + q + 1 for q in range(m)]
    matrix.append(tmp)

for i in range(n):
    for q in range(m):
        print(str(matrix[i][q]).ljust(3), end=' ')
    print()



''' –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 2 '''


x = input().split()
n, m = (int(x[0]), int(x[1]))
matrix = []

count = 1
for i in range(n):
    tmp = [count + q * n for q in range(m)]
    matrix.append(tmp)
    count += 1

for i in range(n):
    for q in range(m):
        print(str(matrix[i][q]).ljust(3), end=' ')
    print()


''' –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 3 '''


n = int(input())
matrix = []

for i in range(n):
    row = [1 if j == i or j == n - i - 1 else 0 for j in range(n)]
    matrix.append(row)

for row in matrix:
    for element in row:
        print(element, end=' ')
    print()



'''  –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 4 '''


''' –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 5 üå∂Ô∏è '''


x = input().split()
n, m = (int(x[0]), int(x[1]))
tmp = [e for e in range(1, m + 1)]
matrix = []

for i in range(n):
    matrix.append(tmp)
    tmp = tmp[1:] + [tmp[0]]


for i in range(n):
    for q in range(m):
        print(str(matrix[i][q]).ljust(3), end=" ")
    print()


''' –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–º–µ–π–∫–æ–π '''


x = input().split()
n, m = (int(x[0]), int(x[1]))
matrix = []

for _ in range(n):
    tmp = [e for e in range(m)]
    matrix.append(tmp)

count = 1
for i in range(n):
    for q in range(m):
        matrix[i][q] = count
        count += 1


for i in range(n):
    if i % 2 != 0:
        matrix[i].reverse()


for i in range(n):
    for q in range(m):
        print(str(matrix[i][q]).ljust(3), end=' ')
    print()




''' –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º–∏ üå∂Ô∏è '''


n, m = map(int, input().split())
matrix = []

for _ in range(n):
    tmp = [e for e in range(m)]
    matrix.append(tmp)

count = 1
for k in range(n * m):
    for i in range(n):
        for j in range(m):
            if i + j == k:
                matrix[i][j] = count
                count += 1

for i in range(n):
    for q in range(m):
        print(str(matrix[i][q]).ljust(3), end=' ')
    print()



''' –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Ä–∞–ª—å—é üòàüòà '''

n, m = map(int, input().split())
matrix = [[0] * m for _ in range(n)]

directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
current_direction = 0
current_position = (0, 0)

for i in range(1, n * m + 1):
    matrix[current_position[0]][current_position[1]] = i
    next_row, next_col = current_position[0] + directions[current_direction][0], current_position[1] + directions[current_direction][1]

    if 0 <= next_row < n and 0 <= next_col < m and matrix[next_row][next_col] == 0:
        current_position = (next_row, next_col)
    else:
        current_direction = (current_direction + 1) % 4
        current_position = (current_position[0] + directions[current_direction][0], current_position[1] + directions[current_direction][1])

for row in matrix:
    print(*row)



''' or '''

n, m = [int(i) for i in input().split()]

matrix = [[0] * m for _ in range(n)]
counter = 1
rows_passed, columns_passed = 0, 0
current_row, current_column = 0, 0

for k in range(n * m):
    if counter == n * m + 1:
        break
    direction = k % 4
    if direction == 0:
        for j in range(columns_passed, m - columns_passed):
            matrix[current_row][j] = counter
            counter += 1
        current_column = j
        rows_passed += 1
    elif direction == 1:
        for i in range(rows_passed, n - rows_passed + 1):
            matrix[i][current_column] = counter
            counter += 1
        current_row = i
        columns_passed += 1
    elif direction == 2:
        for j in range(current_column - 1, columns_passed - 2, -1):
            matrix[current_row][j] = counter
            counter += 1
        current_column = j
    elif direction == 3:
        for i in range(current_row - 1, rows_passed - 1, -1):
            matrix[i][current_column] = counter
            counter += 1
        current_row = i

for i in range(n):
    for j in range(m):
        print(matrix[i][j], end=' ')
    print()



''' –°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü '''


x = input().split()
n, m = int(x[0]), int(x[1])
matrix1 = [[int(x) for x in input().split()] for _ in range(n)]
z = input()
matrix2 = [[int(x) for x in input().split()] for _ in range(n)]
matrix3 = [[int(x) for x in range(m)] for _ in range(n)]

for i in range(n):
    for q in range(m):
        matrix3[i][q] = matrix1[i][q] + matrix2[i][q]


for i in range(n):
    print(*matrix3[i])




''' –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü üå∂Ô∏è '''


n, m = [int(i) for i in input().split()]
matrix1 = [[int(x) for x in input().split()] for _ in range(n)]
input()
n2, m2 = [int(i) for i in input().split()]
matrix2 = [[int(x) for x in input().split()] for _ in range(n2)]
matrix3 = [[0] * m2 for _ in range(n)]

for i in range(n):
    for q in range(m2):
        for k in range(m):
            matrix3[i][q] += matrix1[i][k] * matrix2[k][q]


for x in matrix3:
    print(*x)



''' –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å—Ç–µ–ø–µ–Ω—å üå∂Ô∏è '''


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã
n = int(input())

# –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É, —Å—á–∏—Ç—ã–≤–∞—è –µ–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–∞ —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞, —Ä–∞–∑–¥–µ–ª—è–µ—Ç –µ–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ int
matrix1 = [[int(x) for x in input().split()] for _ in range(n)]

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–µ–ø–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –≤–æ–∑–≤–æ–¥–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É
x = int(input())

# –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
matrix2 = matrix1.copy()

# –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º —É–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü (–≤–æ–∑–≤–æ–¥–∏–º –≤ —Å—Ç–µ–ø–µ–Ω—å)
for _ in range(x - 1):
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏
    matrix = [[0] * n for _ in range(n)]
    for i in range(n):
        for q in range(n):
            for k in range(n):
                matrix[i][q] += matrix1[i][k] * matrix2[k][q]

    # –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    matrix1 = matrix2 = matrix

# –í—ã–≤–æ–¥–∏–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
for row in matrix1:
    print(*row)



