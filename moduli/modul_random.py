# ''' –û—Ä–µ–ª & –†–µ—à–∫–∞ '''
#
# import random
#
# n = int(input())    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
# for i in range(n):
#     li = random.choice(['–û—Ä–µ–ª', '–†–µ—à–∫–∞'])
#     print(li)

# ''' or '''
#
# import random
# print(*[("–û—Ä–µ–ª","–†–µ—à–∫–∞")[random.randint(0,1)] for i in range(int(input()))], sep = '\n')
#
#
# ''' or '''
#
# from random import randint
#
# COIN = ['–û—Ä–µ–ª', '–†–µ—à–∫–∞']
#
# for _ in range(int(input())):
#     print(COIN[randint(0, 1)])


# ''' –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç –±—Ä–æ—Å–∫–∏ –∏–≥—Ä–∞–ª—å–Ω–æ–≥–æ –∫—É–±–∏–∫–∞ c 6 –≥—Ä–∞–Ω—è–º–∏ '''
#
# import random
#
# for i in range(int(input())):
#     num = random.randint(1, 6)
#     print(num)


# ''' or '''
#
# from random import randrange as rr
# [print(rr(1, 7)) for _ in range(int(input()))]


# ''' –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å '''
#
# from random import choice
#
# def generate_password(length):
#     start_upper = 65  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ Uppercase (A)
#     end_upper = 90    # –ö–æ–Ω–µ—á–Ω—ã–π –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ Uppercase (Z)
#     start_lower = 97  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ Lowercase (a)
#     end_lower = 122   # –ö–æ–Ω–µ—á–Ω—ã–π –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ Lowercase (z)
#
#     all_characters = [chr(code) for code in range(start_upper, end_upper + 1)] + [chr(code) for code in range(start_lower, end_lower + 1)]
#
#     return ''.join([choice(all_characters) for _ in range(length)])
#
# length = int(input())  # –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
# password = generate_password(length)
# print(password)
# #
#
#
# ''' or '''
#
# from random import *
#
# for _ in range(int(input())):
#     print(chr(choice([randint(65, 90), randint(97, 122)])), end='')
#
#
# ''' or '''
#
# import random
#
# length = int(input())    # –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
#
# for _ in range(length):
#     if random.randint(0, 1):
#         print(chr(random.randint(65, 90)), end='')
#     else:
#         print(chr(random.randint(97, 122)), end='')
#
#
# ''' or '''
#
# from random import randint as R
#
# for _ in range(int(input())):
#     print([chr(R(65, 90)), chr(R(97, 122))][R(0, 1)], end = '')

# ''' –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 7 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª, —á–∏—Å–ª–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤. '''
#
# import random
#
# results = []
# for i in range(int(input())):
#     result = random.randint(1, 49)
#     results.append(result)
#
# sorted_results = sorted(results)
# print(*sorted_results)
#
#
# ''' or '''
#
# import random
#
# s = set()
# while len(s) < 7:
#     s.add(random.randint(1, 49))
# print(*sorted(s))
#
#
# ''' or '''
#
# import random as rnd
# print(*sorted(rnd.sample(range(1, 50), 7)))


# ''' IP –∞–¥—Ä–µ—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —á–∏—Å–µ–ª –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç 0 –¥–æ 255 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–æ–π.'''
#
# import random
# def generate_ip():
#     ip = f'{random.randrange(256)}.{random.randrange(256)}.{random.randrange(256)}.{random.randrange(256)}'
#     print(ip)
#
# generate_ip()
#
#
# ''' or '''
#
# from random import randrange as r
#
# def generate_ip():
#     return f'{r(256)}.{r(256)}.{r(256)}.{r(256)}'
#
#
# ''' or '''
#
# from random import choice
#
#
# def generate_ip():
#     return '.'.join(str(choice(range(256))) for _ in range(4))
#
#
#
# ''' or '''
#
# from random import randint
#
# def generate_ip():
#     return f'{randint(0, 255)}.{randint(0, 255)}.{randint(0, 255)}.{randint(0, 255)}'


# ''' Post code generation '''
#
# from random import *
#
#
# def generate_index():
#     return (f'{chr(randint(65, 90))}{chr(randint(65, 90))}{randrange(100)}_{randrange(100)}'
#             f'{chr(randint(65, 90))}{chr(randint(65, 90))}')
#
#
# print(generate_index())
#
# ''' or '''
#
# from random import choice, randint
# from string import ascii_uppercase as letter
#
#
# def generate_index():
#     return (f'{choice(letter)}{choice(letter)}{randint(0, 99)}_{randint(0, 99)}'
#             f'{choice(letter)}{choice(letter)}')
#
#
# ''' or '''
#
# from random import choice, randrange
# from string import ascii_uppercase
#
#
# def generate_index():
#     n1, n2 = (randrange(100) for i in range(2))
#     a, b, c, d = (choice(ascii_uppercase) for i in range(4))
#     return (f'{a}{b}{n1}_{n2}{c}{d}')
#
#
# ''' or '''
#
# from random import randint
#
#
# def generate_index():
#     return (f'{chr(randint(65, 90)) * 2}{randint(0, 99)}_{randint(0, 99)}'
#             f'{chr(randint(65, 90)) * 2}')



# ''' –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ç—Ä–∏—Ü—ã '''
#
#
# from random import *
#
# matrix = [[1, 2, 3, 4],
#           [5, 6, 7, 8],
#           [9, 10, 11, 12],
#           [13, 14, 15, 16]]
#
# def generate_ip():
#     shuffle(matrix)
#     return matrix
#
#
# print(generate_ip())


# ''' tickets generator '''
#
# import random
# print(*random.sample(range(1000000, 10000000), 100), sep='\n')
#
#
# ''' or '''
#
# from random import *
# import string
#
# num = [i for i in range(1, 9)]
# for i in range(1, 101):
#     print(*sample(num, 7), sep='')



# ''' –ê–Ω–∞–≥—Ä–∞–º–º–∞ '''
#
#
# from random import *
#
# word = input()
#
# characters = [char for char in word]
# shuffle(characters)
# new_string = ''.join(characters)
# print(new_string)
#
#
# ''' or '''
#
# from random import sample as S
#
# anagram = input()
#
# print(''.join(S(anagram, len(anagram))))
#
#
# ''' or '''
#
# import random as r
# w = list(input())
# r.shuffle(w)
# print(*w, sep='')



# ''' –ò–≥—Ä–æ –≤ –ë–∏–Ω–≥–æ '''
#
#
# from random import *
#
#
# num = [i for i in range(1, 76)]
# numbers = sample(num, 25)
# bingo = [[str(numbers.pop()).ljust(3) for _ in range(5)] for _ in range(5)]
# bingo[2][2] = str(0).ljust(3)
# [print(*row, sep='') for row in bingo]
#
#
# ''' or '''
#
# from random import sample
#
# bingo = sample(range(1, 76), 24)
# bingo.insert(12, 0)
# for i in range(5):
#     for j in range(5):
#         print(str(bingo[i * 5 + j]).rjust(3), end='')
#     print()
#
#
# ''' or '''
#
# from random import shuffle
#
#
# lst = list(range(1, 76))
# shuffle(lst)
# m = [[lst.pop() for _ in range(5)] for _ in range(5)]
# m[2][2] = 0
# for row in m:
#     print(*row)
#
#
# ''' or '''
#
# from random import sample
#
# numbers = sample(range(1, 76), 25)
# bingo = [numbers[i:i + 5] for i in range(0, 21, 5)]
# bingo[2][2] = 0
#
# for i in range(5):
#     for j in range(5):
#         print(str(bingo[i][j]).ljust(3), end=' ')
#     print()



# ''' –¢–∞–π–Ω—ã–π –¥—Ä—É–≥ üå∂Ô∏è '''
#
# stud_quantity = int(input())
# list_of_students = []
# for i in range(stud_quantity):
#     students = input()
#     list_of_students.append(students)
#
# for i in range(len(list_of_students)):
#     print(f'{list_of_students[i]} - {list_of_students[(i + 1) % len(list_of_students)]}')
#
#
#
# ''' or '''
#
# import random
#
# S = [input() for _ in range(int(input()))]
# random.shuffle(S)
#
# for i in range(1, len(S) + 1):
#     if i == len(S):
#         print(f'{S[i - 1]} - {S[0]}')
#     else:
#         print(f'{S[i - 1]} - {S[i]}')


# ''' –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π 1 '''
#
# from random import *
# from string import *
#
# letter = (set(ascii_letters) | set(digits)) - set('lI1oO0')
#
#
# def generate_password(length):
#     result = ''.join(choice(list(letter)) for _ in range(length))
#     return result
#
#
# def generate_passwords(count, length):
#     for i in range(count):
#         print(generate_password(length))
#
# n, m = int(input()), int(input())
#
# generate_passwords(n, m)
#
#
# ''' or '''
#
# import random
# import string
#
# s = ''.join((set(string.ascii_letters) | set(string.digits)) - set('lI1oO0'))
# n, m = int(input()), int(input())
# for i in range(n):
#     print(''.join(random.sample(s,m)))


# ''' –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π 2 üå∂Ô∏è '''
#
# from random import choice
# from string import ascii_letters, digits
#
# letter = {
#     'EN': [x for x in ascii_letters if x.isupper() and x not in 'OI'],
#     'en': [x for x in ascii_letters if x.islower() and x not in 'ol'],
#     'dig': [x for x in digits if x not in '01']
# }
#
# def generate_password(length):
#     if length < 3:
#         raise ValueError("Password length must be at least 3")
#
#     password = []
#     password.append(choice(letter['EN']))
#     password.append(choice(letter['en']))
#     password.append(choice(letter['dig']))
#
#     for _ in range(length - 3):
#         char_set = choice(list(letter.keys()))
#         password.append(choice(letter[char_set]))
#
#     return ''.join(password)
#
# def generate_passwords(count, length):
#     for i in range(count):
#         print(generate_password(length))
#
# n = int(input("Enter the number of passwords: "))
# m = int(input("Enter the length of passwords: "))
#
# generate_passwords(n, m)
#
#
# ''' or '''
#
# import string
# from random import choice, shuffle
#
# chars1 = [—Å for —Å in string.ascii_uppercase if —Å not in 'OI']
# chars2 = [—Å for —Å in string.ascii_lowercase if —Å not in 'ol']
# chars3 = list(string.digits[2:])
# chars = chars1 + chars2 + chars3
#
# def generate_password(length):
#     result = [choice(i) for i in (chars1, chars2, chars3)] + [choice(chars) for _ in range(3, length)]
#     shuffle(result)
#     return ''.join(result)
#
# def generate_passwords(count, length):
#     result = set()
#     while len(result) < count:
#         result.add(generate_password(length))
#     return list(result)
#
# for i in generate_passwords(int(input()), int(input())):
#     print(i)
#
#
#
# ''' or '''
#
#
# import string
# from random import sample, shuffle
#
# set1 = set('23456789')
# set2 = set(string.ascii_uppercase) - set('IO')
# set3 = set(string.ascii_lowercase) - set('lo')
# n, m = int(input()), int(input())
# for _ in range(n):
#     password = sample(set1, 1) + sample(set2, 1) + sample(set3, 1) + sample(set1|set2|set3, m-3)
#     shuffle(password)
#     print(''.join(password))



# ''' –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –≤—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å —Ñ–∏–≥—É—Ä—ã '''
#
#
# import random
#
# n = 10 ** 6
# k = 0
# s0 = 16
# for _ in range(n):
#     x = random.uniform(-2, 2)
#     y = random.uniform(-2, 2)
#
#     if -2 <= x <= 2 and -2 <= y <= 2 and x**3 + y**4 + 2 >= 0 and x*3 + y**2 <= 2:
#         k += 1
#
# print((k/n)*s0)
#
#
#
#
# ''' –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ œÄ '''
#
# import random
#
# n = 10 ** 6
# S = 4
# k = 0
#
# for _ in range(n):
#     x = random.uniform(-1, 1)
#     y = random.uniform(-1, 1)
#     if x ** 2 + y ** 2 <= 1:
#         k += 1
#
# print((k / n) * S)


# ''' –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞ a –∏ b
# –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–∑ –æ—Ç—Ä–µ–∑–∫–∞ [a;b].'''
#
# import random
#
# num1 = random.randint(0, 17)
# num2 = random.randint(-5, 5)
#
# print(num1)
# print(num2)


# ''' –≤—ã–≤–æ–¥–∏—Ç 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [1;100]: '''
#
# import random
#
# for _ in range(10):
#     print(random.randint(1, 100))


# import random
#
# print('–ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏... ')
# print('–ó–Ω–∞—á–µ–Ω–∏—è –≥—Ä–∞–Ω–µ–π:')
# print(random.randint(1, 6))
# print(random.randint(1, 6))


# import random
#
# again = '–¥'
# while again.lower() == '–¥':
#     print('–ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏... ')
#     print('–ó–Ω–∞—á–µ–Ω–∏—è –≥—Ä–∞–Ω–µ–π:')
#     print(random.randint(1, 6))
#     print(random.randint(1, 6))
#     again = input('–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏ –µ—â–µ —Ä–∞–∑? (–¥ = –¥–∞, –Ω = –Ω–µ—Ç): ')


# import random
#
# for _ in range(10):
#     num = random.randint(0, 1)
#     if num == 0:
#         print('–û—Ä–µ–ª')
#     else:
#         print('–†–µ—à–∫–∞')


# ''' –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –µ–≥–æ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º. '''
#
# import random
#
# numbers = [1, 2, 3, 4, 5, 6, 7, 8]
# random.shuffle(numbers)
# print(numbers)


# ''' –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (—Å—Ç—Ä–æ–∫—É) –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
# –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä–æ–∫–∏).'''
#
#
# import random
#
# print(random.choice('BEEGEEK'))
# print(random.choice([1, 2, 3, 4]))
# print(random.choice(['a', 'b', 'c', 'd']))


# ''' –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å–ø–∏—Å–æ–∫ (—Å—Ç—Ä–æ–∫—É) –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
# –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ. '''
#
# import random
#
# numbers = [2, 5, 8, 9, 12]
#
# print(random.sample(numbers, 1))
# print(random.sample(numbers, 2))
# print(random.sample(numbers, 3))
# print(random.sample(numbers, 5))


# ''' –ø—Ä–æ–µ–∫—Ç —É–≥–∞–¥–∞–π–∫–∞ '''
#
# from random import *
#
# # Generate a random number between 1 and 100
# target_number = randint(1, 100)
#
# # Initialize the player's guess
# while True:
#     n = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100: "))  # Use the same variable 'n' for the player's guess
#
#     if n > target_number:
#         print("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ")
#     elif n < target_number:
#         print("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ")
#     else:
#         print('–í—ã —É–≥–∞–¥–∞–ª–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!')
#         break  # Exit the loop when the player guesses correctly


# ''' –ø—Ä–æ–µ–∫—Ç —É–≥–∞–¥–∞–π–∫–∞ '''
#
# from random import *
#
# # –∞–ª–≥–æ—Ä–∏—Ç–º –∏–≥—Ä—ã
# def guessing_game(x, y):
#     phrases_too_much = ['–û—Ö, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', '–ú–Ω–æ–≥–æ–≤–∞—Ç–æ –±—É–¥–µ—Ç!', '–û–≥–æ-–≥–æ, —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ!',
#                         '–ú–Ω–æ–≥–æ!', '–ë–µ—Ä–∏ –Ω–∏–∂–µ', '–ú–Ω–æ–≥–æ–≤–∞—Ç–æ!', '–ù—É–∂–Ω–æ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ!']
#     phrases_too_little = ['–û—Ö, —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', '–ú–∞–ª–æ–≤–∞—Ç–æ –±—É–¥–µ—Ç!', '–≠—Ö, —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ!',
#                         '–ú–∞–ª–æ!', '–ë–µ—Ä–∏ –≤—ã—à–µ', '–ú–∞–ª–æ–≤–∞—Ç–æ!', '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ!']
#     phrases_almost = ['–ü–æ—á—Ç–∏ —É–≥–∞–¥–∞–ª!', '–ì–æ—Ä—è—á–æ, –Ω–æ –Ω–µ –æ—á–µ–Ω—å', '–£–∂–µ —Ä—è–¥–æ–º', '–¢—ã –±–ª–∏–∑–æ–∫', '–¢—ã —É–∂–µ —Ä—è–¥–æ–º', '–ù—É –∂–µ, –ø–æ—á—Ç–∏',
#                       '–ì–æ—Ä—è—á–æ!']
#     phrases_guessed = ['–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –º–æ—ë —á–∏—Å–ª–æ :)', '–ú–æ–ª–æ–¥–µ—Ü! –¢—ã —É–≥–∞–¥–∞–ª :)', '–£—Ä–∞, —Ç—ã —É–≥–∞–¥–∞–ª! :)']
#     phrases_too_soon = ['–û–≥–æ, —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!', '–î–∞ —Ç—ã –≤–æ–ª—à–µ–±–Ω–∏–∫! –¢—ã —É–≥–∞–¥–∞–ª –º–æ—ë —á–∏—Å–ª–æ', '–°–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ, —Ç—ã –ø–æ–¥–≥–ª—è–¥—ã–≤–∞–ª?',
#                         '–£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è!', '–î–∞–∂–µ —è –±—ã –Ω–µ —Å–º–æ–≥ –æ—Ç–≥–∞–¥–∞—Ç—å —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!']
#     if x > y:
#         x, y = y, x
#         num_0 = randint(x, y)
#         print('–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç', x, '–¥–æ', y, '–ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!')
#     else:
#         num_0 = randint(x, y)
#         print('–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç', x, '–¥–æ', y, '–ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!')
#     count = 0
#     while True:
#         num_1 = int(input())
#         count += 1
#         if num_1 == num_0:
#             if count == 1:
#                 print('–°–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ, —Ç—ã –ø–æ–¥–≥–ª—è–¥—ã–≤–∞–ª?')
#                 if input('–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? –í–≤–µ–¥–∏ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç" ').lower() in ['–¥–∞', 'lf']:
#                     start()
#                 else:
#                     print('–ü—Ä–∏—Ö–æ–¥–∏, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∂–µ–ª–∞–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ :)')
#                     break
#             elif 1 <= count <= 5:
#                 print(choice(phrases_too_soon))
#                 if input('–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? –í–≤–µ–¥–∏ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç" ').lower() in ['–¥–∞', 'lf']:
#                     start()
#                 else:
#                     print('–ü—Ä–∏—Ö–æ–¥–∏, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∂–µ–ª–∞–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ :)')
#                     break
#             else:
#                 print(choice(phrases_guessed))
#                 if input('–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? –í–≤–µ–¥–∏ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç" ').lower() in ['–¥–∞', 'lf']:
#                     start()
#                 else:
#                     print('–ü—Ä–∏—Ö–æ–¥–∏, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∂–µ–ª–∞–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ :)')
#                     break
#         elif num_1 > num_0:
#             if abs(num_1 - num_0) < 5:
#                 print(choice(phrases_too_much), choice(phrases_almost), sep='\n')
#             else:
#                 print(choice(phrases_too_much))
#         elif num_1 < num_0:
#             if abs(num_1 - num_0) < 5:
#                 print(choice(phrases_too_little), choice(phrases_almost),  sep='\n')
#             else:
#                 print(choice(phrases_too_little))
#
# # –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
# def game_rules():
#     print('–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –æ–∑–Ω–∞–∫–æ–º–ª—é —Ç–µ–±—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã.')
#     print('–Ø –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ, –∞ —Ç—ã –±—É–¥–µ—à—å –µ–≥–æ –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å.')
#     print('–î–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª —Ç—ã –≤—ã–±–µ—Ä–µ—à—å —Å–∞–º.')
#     print('–ö –ø—Ä–∏–º–µ—Ä—É, –µ—Å–ª–∏ —Ç—ã —É–∫–∞–∂–µ—à—å –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 100, —è –Ω–µ —Å–º–æ–≥—É –∑–∞–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ "101" :)')
#     print('–Ø –ø–æ–ø—Ä–æ—à—É —Ç–µ–±—è –≤–≤–µ—Å—Ç–∏ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ì—Ä–∞–Ω–∏—Ü—ã –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å! –¢–∞–∫ –∏–≥—Ä–∞—Ç—å –º—ã –Ω–µ —Å–º–æ–∂–µ–º.')
#     input('–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã —è –±—ã–ª —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –ø–æ–Ω—è–ª –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã :)')
#
# # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
# def is_valid_x(x):
#     if x.isdigit() is False:
#         print('–¢—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ :(')
#         print('–ß—Ç–æ –∂, –ª–∞–¥–Ω–æ, –≤–≤–µ–¥–∏ –Ω–æ–≤—ã–µ —á–∏—Å–ª–∞.')
#         start()
#
# def is_valid_xy(x, y):
#     while x == y:
#         print('–¢—ã –≤–≤–µ–ª –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —á–∏—Å–ª–∞. –Ø –∂–µ –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ —Ç–∞–∫ –∏–≥—Ä–∞—Ç—å –º—ã –Ω–µ —Å–º–æ–∂–µ–º :(')
#         print('–ß—Ç–æ –∂, –ª–∞–¥–Ω–æ, –≤–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ.')
#         start()
#     if y.isdigit() is False:
#         print('–Ø –∑–∞–ø—É—Ç–∞–ª—Å—è :( –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ')
#         print('–î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ :)')
#         start()
#     else:
#         return True
#
# # –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
# def start():
#     x = input('–í–≤–µ–¥–∏ –ø–µ—Ä–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ')
#     is_valid_x(x)
#     y = input('–í–≤–µ–¥–∏ –≤—Ç–æ—Ä—É—é –≥—Ä–∞–Ω–∏—Ü—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ')
#     if is_valid_xy(x, y) is True:
#         x, y = int(x), int(y)
#         guessing_game(x, y)
#
# # –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–≥—Ä—É
# if input('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –î–º–∏—Ç—Ä–∏—è! –ù–µ –∂–µ–ª–∞–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É? –í–≤–µ–¥–∏ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç" ').lower() in ['–¥–∞', 'lf']:
#     game_rules()
#     start()
# else:
#     if input('–≠—Ç–æ –Ω–µ –∑–∞–π–º—ë—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–∏–ª. –ï—Å–ª–∏ –≤—Å—ë —Ç–∞–∫–∏ –Ω–∞–¥—É–º–∞–ª, –≤–≤–µ–¥–∏ "–¥–∞" :)').lower() in ['–¥–∞', 'lf']:
#         game_rules()
#         start()
#     else:
#         print('–ü—Ä–∏—Ö–æ–¥–∏, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∂–µ–ª–∞–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å :)')


# ''' –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ '''
#
# from math import *
# from math import ceil
# right = int(input())
# b = 2
# def logo():
#     res = log(right, b)
#     print(int(ceil(res)))
#
# logo()
#
# ''' or '''
#
# from math import log2, ceil
# print (ceil(log2(int(input()))))
#
#
# ''' or '''
#
# n = int(input())
# attempts = 0
#
# while 2 ** attempts < n:
#     attempts += 1
#
# print(attempts)
